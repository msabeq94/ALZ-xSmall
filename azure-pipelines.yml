trigger: none

pool: default

parameters:
  - name: customer_client_id
    displayName: "Customer Client ID"
    type: string
    default: "14c278e4-bfb7-451a-8af2-40f0c1e7675f"

  - name: customer_client_secret
    displayName: "Customer Client Secret"
    type: string
    default: "J-d8Q~vvfYol.6aJoA12mI_m9YjN3ab-vp5uecDO"

  - name: customer_tenant_id
    displayName: "Customer Tenant ID"
    type: string
    default: "87431d80-c13c-4f97-8d52-4bd5ec6e617e"

  - name: customer_subscription_id
    displayName: "Customer Subscription ID"
    type: string
    default: "1f61fe99-8069-40f0-ac65-41b326ed0d5a"

  - name: customer_name
    displayName: "Customer Name"
    type: string
    default: "mos"

  - name: customer_location
    displayName: "Customer Location"
    type: string
    default: "eastus"

  - name: NAME
    displayName: "NAME"
    type: string
    default: "alz-MgDeployment-mos"

stages:
- stage: AuthenticateAzure
  jobs:
    - job: AuthenticateServicePrincipal
      steps:
        - script: |
            az login --service-principal --username ${{ parameters.customer_client_id }} --password ${{ parameters.customer_client_secret }} --tenant ${{ parameters.customer_tenant_id }}
          displayName: "Authenticate Service Principal"

- stage: DeployManagementGroups
  dependsOn: AuthenticateAzure
  jobs:
    - job: DeployManagementGroupBicep
      steps:
        - script: |
            sed -i "s/customerName/${{ parameters.customer_name }}/g" managementGroups.parameters.XSmall.json
            seconds=$(date +%S%3N)
            deploymentNameMG="alz-MgDeployment-${{ parameters.customer_name }}-$seconds"
            echo "##vso[task.setvariable variable=MGdeploymentName]$deploymentNameMG"
            az deployment tenant create --name $deploymentNameMG --location ${{ parameters.customer_location }} --template-file "managementGroupsXSmall.bicep" --parameters "managementGroups.parameters.XSmall.json"
          displayName: "Deploy Management Group Bicep"

- stage: AssignResourcesToManagementGroups
  dependsOn: DeployManagementGroups
  jobs:
    - job: AssignSubscriptionsToManagementGroups
      steps:
        - script: |
            az account management-group subscription add --name "alz-landingzones-online" -s ${{ parameters.customer_subscription_id }}
          displayName: "Assign Subscription to Management Groups"

- stage: DeployMainInfrastructure
  dependsOn:
    - AuthenticateAzure
    - AssignResourcesToManagementGroups
  jobs:
    - job: DeployMainBicepModules
      steps:
        - script: |
            az account set --subscription ${{ parameters.customer_subscription_id }}
            seconds=$(date +%S%3N)
            deploymentNameMAIN="alz-MgDeployment-${{ parameters.customer_name }}-$seconds"
            echo "##vso[task.setvariable variable=MAINdeploymentName]$deploymentNameMAIN"
            sed -i "s/customerLocation/${{ parameters.customer_location }}/g" Main.parameters.XSmall.json
            sed -i "s/mgmtSubID/${{ parameters.customer_subscription_id }}/g" Main.parameters.XSmall.json
             sed -i "s/mgmtSubID/${{ parameters.customer_subscription_id }}/g" MainXSmall.bicep
            sed -i "s/mgmtSubID/${{ parameters.customer_subscription_id }}/g" Modules/FWXSmall.bicep
            sed -i "s/mgmtSubID/${{ parameters.customer_subscription_id }}/g" Modules/PolicyassignmentsXSmall.bicep
            az deployment sub create --name $deploymentNameMAIN --location ${{ parameters.customer_location }} --template-file "MainXSmall.bicep" --parameters "Main.parameters.XSmall.json"
          displayName: "Deploy Main Bicep File"

- stage: GetFirewallPublicIP
  dependsOn: DeployMainInfrastructure
  jobs:
    - job: RetrieveFirewallIP
      displayName: "Retrieve Firewall Public IP"
      steps:
        - script: |
            fwIPAddress=$(az network public-ip show -g 'vf-core-CentralHub-rg' -n 'vf-core-alz-fw-ip' --query ipAddress -o tsv)
            echo $fwIPAddress > fwIPAddress
            echo "Firewall IP: $fwIPAddress"
          displayName: "Get Firewall Public IP"
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "fwIPAddress"
            artifact: "fwIPAddress"
            publishLocation: "pipeline"

- stage: CleanUpResources
  dependsOn: DeployMainInfrastructure
  jobs:
    - job: ManualApprovalResourcesStep
      displayName: "Review and Approve Resources Cleanup"
      pool: server 
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: "msabeq@outlook.com"
            instructions: "Please approve or reject the execution of resource cleanup."
    - job: RemoveResources
      dependsOn: ManualApprovalResourcesStep
      steps:
        - script: |
            az group delete --name "vf-core-InternalServices-rg" --yes
            az group delete --name "vf-core-Production-rg" --yes
            az group delete --name "vf-core-Development-rg" --yes
            az group delete --name "vf-core-CentralHub-rg" --yes
            az group delete --name "NetworkWatcherRG" --yes
          displayName: "Delete Resource Groups"

- stage: CleanUpManagementGroups
  dependsOn: AssignResourcesToManagementGroups
  jobs:
    - job: ManualApprovalManagementGroupsStep
      displayName: "Review and Approve ManagementGroups Cleanup"
      pool: server 
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: "msabeq@outlook.com"
            instructions: "Please approve or reject the execution of ManagementGroups cleanup."
    - job: RemoveManagementGroups
      dependsOn: ManualApprovalManagementGroupsStep
      steps:
        - script: |
            az account management-group subscription remove --name "alz-landingzones-online" -s ${{ parameters.customer_subscription_id }}
            az account management-group delete --name "alz-landingzones-online"
            az account management-group delete --name "alz-landingzones"
            az account management-group delete --name "alz"
          displayName: "Delete Management Groups"

- stage: CleanUpAzurePolicy
  dependsOn: DeployMainInfrastructure
  jobs:
    - job: ManualApprovalAzurePolicyStep
      displayName: "Review and Approve Azure Policy Cleanup"
      pool: server 
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: "msabeq@outlook.com"
            instructions: "Please approve or reject the execution of Azure Policy cleanup."
    - job: RemoveAzurePolicyAssignments
      dependsOn: ManualApprovalAzurePolicyStep
      steps:
        - script: |
            subscriptionId="${{ parameters.customer_subscription_id }}"
            policyAssignments=$(az policy assignment list --scope "/subscriptions/$subscriptionId" --query "[].name" -o tsv)
            for assignment in $policyAssignments; do
              az policy assignment delete --name "$assignment" --scope "/subscriptions/$subscriptionId"
            done
          displayName: "Delete Azure Policy Assignments"
    - job: RemoveAzurePolicyDefinitions
      dependsOn: RemoveAzurePolicyAssignments
      steps:
        - script: |
            subscriptionId="${{ parameters.customer_subscription_id }}"
            policyDefinitions=$(az policy definition list --subscription $subscriptionId --query "[?policyType=='Custom'].name" -o tsv)
            for definition in $policyDefinitions; do
              az policy definition delete --name "$definition"
            done
          displayName: "Delete Azure Policy Definitions"
